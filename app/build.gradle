import java.util.regex.Pattern

apply plugin: 'com.android.application'

ext{
    pack = false
    cfgRes = [
            umeng_key                     : "5658064067e58e96a7002a4f",
            keyboard_toolbar_ad_flag      : 1
    ]
}

android {
    compileSdkVersion project.ext.compile_sdk_version
    buildToolsVersion project.ext.build_tools_version
    defaultConfig {
        applicationId "com.qisiemoji.inputmethod.wa.sticker.store"
        versionCode 4
        versionName "1.0"
        minSdkVersion project.ext.min_sdk_version
        targetSdkVersion project.ext.target_sdk_version

        manifestPlaceholders = [STICKER_NAME : 'Cute Cat Meme Sticker',
                                LABEL : 'Cat']

        buildConfigField "String", "AGENT_APPKEY", '"78472ddd7528bcacc15725a16aeec190"'
        //第一版资源集成在asset内，改值应为true；后续资源通过网络下载，需要设置为false
        buildConfigField "Boolean", "IS_CONTAINS_ASSET", 'false'
        //该app需要验证资源合理性时设置该值为true，正式发版需设置为false
        buildConfigField "Boolean", "SHOULD_VALIDATE", 'false'

        CopyConfig(manifestPlaceholders)
//        if(cfgRes.containsKey('application_id')){
//            applicationId cfgRes.get('application_id')
//        }
        if(cfgRes.containsKey('version_code')){
            versionCode Integer.parseInt(cfgRes.get('version_code'))
        }
        manifestPlaceholders.put('LABEL','WA Sticker Store')

        def contentProviderAuthority = applicationId + ".stickercontentprovider"
        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String",
                "CONTENT_PROVIDER_AUTHORITY",
                "\"${contentProviderAuthority}\"")
    }
    aaptOptions {
        noCompress "webp"
    }
    android.applicationVariants.all {
        variant ->
            variant.outputs.each { output ->

                def outputFile = output.outputFile
                CopyConfig()
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def name = "xth.apk"
                    if(cfgRes.containsKey('application_id')){
                        name = applicationId+"-v"+cfgRes.get('version_code')+".apk"
                    }
                    output.outputFile = new File("/Users/xm180319/output", name)
                }

            }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file('wrsign')
            keyAlias 'wuren'
            keyPassword '5nut2018'
            storePassword '5nut2018'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

def CopyConfig(manifestPlaceholders){
    if(!pack){
        return;
    }
    String path = project.properties.getOrDefault('bundle', '/Users/xm180319/stickertest')
    File dataSrc = new File(path)
    if (dataSrc == null || !dataSrc.exists() || !dataSrc.canRead()) {
        return
    }

    FileTree tmpFt
    if (dataSrc.isFile()) {
        tmpFt = zipTree(dataSrc)
    } else if (dataSrc.isDirectory()) {
        tmpFt = fileTree(dataSrc)
    } else {
        throw new GradleException("$dataSrc is not file or directory")
    }
    tmpFt.matching { include "config.txt" }.each {
        new BufferedReader(new InputStreamReader(new FileInputStream(it))).with { BufferedReader reader ->
            def keyRegex = Pattern.compile("^[^:]+:")
            reader.readLines().each {
                def key = it.find(keyRegex)
                if (key != null) {
                    def k = key.substring(0, key.size() - 1).trim()
                    def v = it.substring(key.size()).trim()
                    cfgRes[k] = v
                    println(k + "==>" + v)
                }
            }
        }
    }
    if(cfgRes.containsKey('label')){
        manifestPlaceholders.put('LABEL',cfgRes.get('label'))
    }
    if(cfgRes.containsKey('name')){
        manifestPlaceholders.put('STICKER_NAME',cfgRes.get('name'))
    }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile "com.android.support:appcompat-v7:${support_version}"
    compile "com.android.support:design:${support_version}"
    compile 'com.github.bumptech.glide:glide:3.8.0'
    compile "com.android.support:recyclerview-v7:${support_version}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile "com.squareup.okhttp3:okhttp:${okhttp_version}"
    annotationProcessor 'com.bluelinelabs:logansquare-compiler:1.3.7'
    compile 'com.bluelinelabs:logansquare:1.3.7'
    compile 'com.github.aurae.retrofit2:converter-logansquare:1.4.1'
    compile "com.kikatech.koala:koala_sdk:t1.0.0.30.1"
    compile "com.google.android.gms:play-services-base:11.6.0"

    compile 'com.facebook.fresco:fresco:1.10.0'
    compile 'com.facebook.fresco:webpsupport:1.10.0'
    compile 'com.facebook.fresco:animated-webp:1.10.0'

    compile('com.giphy.sdk:core:1.0.2@aar')
    compile 'com.google.code.gson:gson:2.3.1'
}
